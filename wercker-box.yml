name: dart-chrome-app
version: 0.0.2
inherits: michilu/dart@1.7.2
type: main
platform: ubuntu@12.04
description: A box create to build, test and deploy Dart applications on Chrome Apps
keywords:
  - dart
  - chrome
script: |
  sudo apt-get update -qq

  # Install zip and start a virtual frame buffer.
  sudo apt-get -y -q install zip

  # For chrome installation.
  sudo apt-get -y -q install gconf-service libappindicator1 libcap2 libgconf-2-4 xdg-utils

  # Install chrome.
  curl -O https://dl.google.com/linux/direct/google-chrome-unstable_current_amd64.deb
  sudo dpkg -i google-chrome-unstable_current_amd64.deb

  # For chrome installation failure.
  set -o errexit

  # Display installed versions.
  /usr/bin/google-chrome --version

  # Install dartium
  wget "http://storage.googleapis.com/dart-archive/channels/stable/release/latest/dartium/dartium-linux-x64-release.zip"
  unzip "dartium-linux-x64-release.zip"
  mv `find . -name "dartium-lucid64-full-stable*" -type d|head -1` chromium
  rm "dartium-linux-x64-release.zip"

  # Display installed versions.
  /usr/bin/google-chrome --version
  $DART_SDK/../chromium/chrome --version

default-build:
  dart-chrome-app:
    priority : 50
    detect:
      - default: true
    text-to-append: |
      # Build definition
      build:
        # The steps that will be executed on build.
        steps:
          # Start xvfb which gives the context an virtual display.
          - script:
              name: Enable virtual display.
              code: |-
                # which is required for tests that require an GUI.
                export DISPLAY=:99.0
                start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset
                # Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.
                sleep 3

          - script:
              name: Get our packages.
              code: |-
                pub get

          #- script:
          #    name: Build the archive.
          #    code: |-
          #      if test x$DRONE_REPO_SLUG = xgithub.com/dart-lang/spark -o x$FORCE_NIGHTLY = xyes ; then
          #        # Retrieve configuration from the master branch
          #        curl -o tool/release-config.json \
          #            https://raw.githubusercontent.com/dart-lang/chromedeveditor/master/ide/tool/release-config.json
          #        ./grind release-nightly
          #      else
          #        ./grind deploy
          #      fi

          - script:
              name: Test the project
              code: |-
                ./grind mode-test

                # Turn on fast fail for the bash script.
                set -e

                # Run tests on the Dart version of the app.
                dart tool/test_runner.dart --dartium

                # Run tests on the dart2js version of the app.
                dart tool/test_runner.dart --chrome-dev

          - script:
              name: Output the project
              code: |-
                rsync -avz $WERCKER_SOURCE_DIR/ $WERCKER_OUTPUT_DIR
